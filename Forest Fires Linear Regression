import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.model_selection import train_test_split
import pickle
from sklearn.linear_model import LogisticRegression
from matplotlib import style
import warnings
from sklearn.exceptions import ConvergenceWarning

# Suppress convergence warnings
warnings.filterwarnings(action='ignore', category=ConvergenceWarning)

# Load the data from a CSV file
data = pd.read_csv("forestfires.csv", sep=",")

# Display the first few rows of the dataset
print("Initial Data:\n", data.head())

# Check if the 'area' column exists
if 'area' not in data.columns:
    print("\n'area' column not found in the dataset.")
else:
    print("\n'area' column found.")

# Select relevant features for prediction, including 'area'
data = data[["month", "FFMC", "DMC", "DC", "ISI", "temp", "RH", "wind", "rain", "area"]]

# Display the first few rows of the selected data
print("\nSelected Features:\n", data.head())

# Convert categorical month data into one-hot encoding
data = pd.get_dummies(data, columns=["month"], drop_first=True)

# Check again if the 'area' column exists after transformation
if 'area' not in data.columns:
    print("\n'area' column was dropped during transformation.")
else:
    print("\n'area' column is present.")

# Define the target variable
predict = "area"

# Prepare the feature set (X) and the target variable (y)
X = np.array(data.drop([predict], axis=1))
y = np.array(data[predict])

# Display the shape of the feature set and target variable
print("\nFeature set shape:", X.shape, "\nTarget variable shape:", y.shape)

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Train a linear regression model
linear = linear_model.LinearRegression()
linear.fit(X_train, Y_train)

# Evaluate the model's performance
accuracy = linear.score(X_test, Y_test)
print(f"\nModel Accuracy: {accuracy}")

# Save the trained model to a file
with open("forestfire_model.pickle", "wb") as f:
    pickle.dump(linear, f)

# Load the trained model from the file
with open("forestfire_model.pickle", "rb") as f:
    linear = pickle.load(f)

# Make predictions on the test set
predictions = linear.predict(X_test)

# Display predictions alongside the actual values
print("\nPredictions vs Actual Values:")
for i in range(len(predictions)):
    print(f"Predicted: {predictions[i]}, Actual: {Y_test[i]}")

# Set the plot style
style.use("ggplot")

# Plot a scatter plot of temperature vs area burned with linear regression line
plt.scatter(data["temp"], data["area"], color="blue", label="Data Points")

# Add a linear regression line to the plot
sorted_temp = np.sort(data["temp"])
predicted_area = linear.predict(np.array(data.drop([predict], axis=1)).reshape(-1, X.shape[1]))
plt.plot(sorted_temp, np.sort(predicted_area), color="red", label="Regression Line")

plt.xlabel("Temperature (CÂ°)")
plt.ylabel("Area Burned")
plt.title("Temperature vs Area Burned")
plt.legend()
plt.show()

# Group data by month and sum the area burned
data_original = pd.read_csv("forestfires.csv", sep=",")
monthly_area_burned = data_original.groupby("month")["area"].sum()

# Define the correct chronological order for months
month_order = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]

# Reindex the monthly area burned data to follow chronological order
monthly_area_burned = monthly_area_burned.reindex(month_order)

# Plot the area burned per month in chronological order
plt.figure(figsize=(10, 6))
monthly_area_burned.plot(kind="bar", color="green")
plt.xlabel("Month")
plt.ylabel("Total Area Burned")
plt.title("Total Area Burned Per Month")
plt.xticks(rotation=45)
plt.show()

# Create a binary target variable indicating fire occurrence
if 'area' in data.columns:
    data['fire_occurrence'] = data['area'].apply(lambda x: 1 if x > 0 else 0)

    # Redefine X and y for this classification task
    X = np.array(data.drop(["area", "fire_occurrence"], axis=1))
    y = np.array(data['fire_occurrence'])

    # Split the data into training and testing sets
    X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.1, random_state=42)

    # Train a logistic regression model for fire occurrence prediction with increased max_iter
    model = LogisticRegression(max_iter=5000)  # Increased max_iter to avoid convergence warnings
    model.fit(X_train, Y_train)

    # Evaluate the model
    model_accuracy = model.score(X_test, Y_test)
    print(f"\nModel Prediction Accuracy: {model_accuracy}")

else:
    print("\nCannot create 'fire_occurrence' as 'area' column is missing.")
